print("Sensors and Actuators")

import time
import serial.tools.list_ports
import sys
from Adafruit_IO import MQTTClient
import time
import random
#from Simple_AI import *
AIO_FEED_IDs = ["nutnhan1", 'nutnhan2']
AIO_USERNAME = "lbnguyen"
AIO_KEY = "aio_slBd46D3x3qLRWeECWhEQGHYO0zV"

def connected(client):
    print("Ket noi thanh cong ...")
    for topic in AIO_FEED_IDs:
        client.subscribe(AIO_FEED_IDs)

def subscribe(client , userdata , mid , granted_qos):
    print("Subscribe thanh cong ...")

def disconnected(client):
    print("Ngat ket noi ...")
    sys.exit (1)

def message(client , feed_id , payload):
    print("Nhan du lieu: " + payload)

client = MQTTClient(AIO_USERNAME , AIO_KEY)
client.on_connect = connected
client.on_disconnect = disconnected
client.on_message = message
client.on_subscribe = subscribe
client.connect()
client.loop_background()



#Get port information
def getPort():
    ports = serial.tools.list_ports.comports()
    N = len(ports)
    commPort = "None"
    for i in range(0, N):
        port = ports[i]
        strPort = str(port)
        if "USB" in strPort:
            splitPort = strPort.split(" ")
            commPort = (splitPort[0])
    #return commPort
    return "/dev/ttyUSB0"

# Define port name
portName = "/dev/ttyUSB0"

#portName = "/dev/ttyUSB1"
print(portName)


# Open port
try:
    ser = serial.Serial(port=portName, baudrate=9600)
    print("Open successfully")
    print(ser)
except:
    print("Can not open the port")

# Declare relay adress 
#relay1_ON  = [0, 6, 0, 0, 0, 255, 200, 91]
#relay1_OFF = [0, 6, 0, 0, 0, 0, 136, 27]
relay1_ON  = [2, 6, 0, 0, 0, 255, 200, 91]
relay1_OFF = [2, 6, 0, 0, 0, 0, 136, 27]
relay2_ON  = [3, 6, 0, 0, 0, 255, 200, 91]
relay2_OFF = [3, 6, 0, 0, 0, 0, 136, 27]
relay3_ON  = [4, 6, 0, 0, 0, 255, 200, 91]
relay3_OFF = [4, 6, 0, 0, 0, 0, 136, 27]

# Set relay state ON = True, OFF = False
def setDevice1(state):
    if state == True:
        ser.write(relay1_ON)
    else:
        ser.write(relay1_OFF)
    time.sleep(1)
    print(serial_read_data(ser))
def setDevice2(state):
    if state == True:
        ser.write(relay2_ON)
    else:
        ser.write(relay2_OFF)
    time.sleep(1)
    print(serial_read_data(ser))
def setDevice3(state):
    if state == True:
        ser.write(relay3_ON)
    else:
        ser.write(relay3_OFF)
    time.sleep(1)
    print(serial_read_data(ser))
    
def serial_read_data(ser):
    bytesToRead = ser.inWaiting()
    if bytesToRead > 0:
        out = ser.read(bytesToRead)
        data_array = [b for b in out]
        print(data_array)
        if len(data_array) >= 7:
            array_size = len(data_array)
            value = data_array[array_size - 4] * 256 + data_array[array_size - 3]
            return value
        else:
            return -1
    return 0





soil_temperature =[1, 3, 0, 6, 0, 1, 100, 11]
def readTemperature():
    serial_read_data(ser)
    ser.write(soil_temperature)
    time.sleep(1)
    return serial_read_data(ser)

soil_moisture = [1, 3, 0, 7, 0, 1, 53, 203]
def readMoisture():
    serial_read_data(ser)
    ser.write(soil_moisture)
    time.sleep(1)
    return serial_read_data(ser)
counter = 10
counter_ai = 5


while True:
    print("TEST SENSOR")
    print(readMoisture())
    time.sleep(1)
    print(readTemperature())
    time.sleep(1)

    client.publish("cambien1", readTemperature())
    client.publish("cambien2", readMoisture())

while True:
    counter = counter - 1
    if counter < 0:
        counter = 10
        #TODO
        print("Ramdon data is publishing")
        temp = random.randint(10,20)
        client.publish("cambien1", temp)
        humi = random.randint(50, 70)
        client.publish("cambien2", humi)
        light = random.randint(100, 700)
        client.publish("cambien3", light)
  time.sleep(1)

while True:
    
    setDevice1(True)
    print("ON1")
    time.sleep(1)
    setDevice2(True)
    print("ON2")
    time.sleep(1)
    setDevice3(True)
    print("ON3")
    time.sleep(1)
    time.sleep(2)
    setDevice1(False)
    print("OFF1")
    setDevice2(False)
    print("OFF2")
    setDevice3(False)
    print("OFF3")
    time.sleep(1)
